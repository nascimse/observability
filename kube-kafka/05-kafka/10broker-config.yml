kind: ConfigMap
metadata:
  name: broker-config
  namespace: monitoring
apiVersion: v1
data:
  init.sh: |-
    #!/bin/bash
    set -e
    set -x
    cp /etc/kafka-configmap/log4j.properties /etc/kafka/

    KAFKA_BROKER_ID=${HOSTNAME##*-}
    SEDS=("s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/")
    LABELS="kafka-broker-id=$KAFKA_BROKER_ID"
    ANNOTATIONS=""

    hash kubectl 2>/dev/null || {
      SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/")
    } && {
      ZONE=$(kubectl get node "$NODE_NAME" -o=go-template='{{index .metadata.labels "failure-domain.beta.kubernetes.io/zone"}}')
      if [ "x$ZONE" == "x<no value>" ]; then
        SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/")
      else
        SEDS+=("s/#init#broker.rack=#init#/broker.rack=$ZONE/")
        LABELS="$LABELS kafka-broker-rack=$ZONE"
      fi

      OUTSIDE_HOST=$(kubectl get node "$NODE_NAME" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
      OUTSIDE_PORT=$((32400 + ${KAFKA_BROKER_ID}))
      SEDS+=("s|#init#advertised.listeners=PLAINTEXT://#init#|advertised.listeners=PLAINTEXT://:9092,OUTSIDE://${OUTSIDE_HOST}:${OUTSIDE_PORT}|")
      ANNOTATIONS="$ANNOTATIONS kafka-listener-outside-host=$OUTSIDE_HOST kafka-listener-outside-port=$OUTSIDE_PORT"

      if [ ! -z "$LABELS" ]; then
        kubectl -n $POD_NAMESPACE label pod $POD_NAME $LABELS || echo "Failed to label $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
      if [ ! -z "$ANNOTATIONS" ]; then
        kubectl -n $POD_NAMESPACE annotate pod $POD_NAME $ANNOTATIONS || echo "Failed to annotate $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
    }
    printf '%s\n' "${SEDS[@]}" | sed -f - /etc/kafka-configmap/server.properties > /etc/kafka/server.properties.tmp
    [ $? -eq 0 ] && mv /etc/kafka/server.properties.tmp /etc/kafka/server.properties

  server.properties: |-
    ############################# Log Basics #############################

    # A comma seperated list of directories under which to store log files
    # Overrides log.dir
    log.dirs=/var/lib/kafka/data/topics

    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions=10

    # Specify the replication factor used for automatically created topics.
    default.replication.factor=3

    # Specify the number of acknowledgments that the producer requires the receiver to receive before a request is complete.
    acks=all 

    # When used together, min.insync.replicas and acks allow you to enforce greater durability guarantees. 
    # A typical scenario would be to create a topic with a replication factor of 3, 
    # set min.insync.replicas to 2, and produce with acks of "all". 
    # This will ensure that the producer raises an exception if a majority of replicas do not receive a write.
    min.insync.replicas=2

    # Enable auto creation of topic on the server
    auto.create.topics.enable=false
   
    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    #num.recovery.threads.per.data.dir=1

    ############################# Server Basics #############################

    # The id of the broker. This must be set to a unique integer for each broker.
    #init#broker.id=#init#

    #init#broker.rack=#init#

    ############################# Socket Server Settings #############################

    # The address the socket server listens on. It will get the value returned from 
    # java.net.InetAddress.getCanonicalHostName() if not configured.
    #   FORMAT:
    #     listeners = listener_name://host_name:port
    #   EXAMPLE:
    #     listeners = PLAINTEXT://your.host.name:9092
    #listeners=PLAINTEXT://:9092
    listeners=PLAINTEXT://:9092,OUTSIDE://:9094

    # Hostname and port the broker will advertise to producers and consumers. If not set, 
    # it uses the value for "listeners" if configured.  Otherwise, it will use the value
    # returned from java.net.InetAddress.getCanonicalHostName().
    #advertised.listeners=PLAINTEXT://your.host.name:9092
    #init#advertised.listeners=PLAINTEXT://#init#

    # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
    #listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
    listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT
    inter.broker.listener.name=PLAINTEXT

    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    num.network.threads=8

    # The number of threads that the server uses for processing requests, which may include disk I/O
    num.io.threads=8

    # The SO_SNDBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.
    socket.send.buffer.bytes=1048576

    # The receive buffer (SO_RCVBUF) used by the socket server
    # The SO_RCVBUF buffer of the socket server sockets. If the value is -1, the OS default will be used.
    socket.receive.buffer.bytes=1048576

    # The maximum size of a request that the socket server will accept (protection against OOM)
    socket.request.max.bytes=104857600

    # The number of queued requests allowed for data-plane, before blocking the network threads
    queued.max.requests=16

    # The purge interval (in number of requests) of the fetch request purgatory
    fetch.purgatory.purge.interval.requests=100 

    # The purge interval (in number of requests) of the producer request purgatory
    producer.purgatory.purge.interval.requests=100

    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    #offsets.topic.replication.factor=1
    #transaction.state.log.replication.factor=1
    #transaction.state.log.min.isr=1

    ############################# Log Flush Policy #############################

    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.

    # Specify the maximum size of the offset index in bytes.
    #log.index.size.max.bytes=154624

    # Specify the interval in bytes when an entry is added to the offset index.
    #log.index.interval.bytes=4096

    # The maximum size of messages that the server can receive.
    message.max.bytes=1000000

    # The number of messages to accept before forcing a flush of data to disk
    log.flush.interval.messages=100000

    # The maximum amount of time a message can sit in a log before we force a flush
    log.flush.interval.ms=50000

    # Specify an interval after which the log is flushed.
    log.flush.scheduler.interval.ms=2000

    ############################# Log Retention Policy #############################

    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.

    # After a consumer group loses all its consumers (i.e. becomes empty) 
    # its offsets will be kept for this retention period before getting discarded. 
    # For standalone consumers (using manual assignment), 
    # offsets will be expired after the time of last commit plus this retention period.
    offsets.retention.minutes=10080

    # The minimum age of a log file to be eligible for deletion due to age
    #log.retention.hours=-1

    # A size-based retention policy for logs. Segments are pruned from the log unless the remaining
    # segments drop below log.retention.bytes. Functions independently of log.retention.hours.
    log.retention.bytes=1073741824

    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    #log.segment.bytes=1073741824 

    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    log.retention.check.interval.ms=300000

    # The log cleaner is disabled by default. This setting means that the segment is deleted after
    # the retention period that is specified in the log retention policy expires.
    #log.cleaner.enable=false

    ############################# Zookeeper #############################

    # Zookeeper connection string (see zookeeper docs for details).
    # This is a comma separated host:port pairs, each corresponding to a zk
    # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
    # You can also append an optional chroot string to the urls to specify the
    # root directory for all kafka znodes.
    zookeeper.connect=zookeeper:2181

    # Timeout in ms for connecting to zookeeper
    zookeeper.connection.timeout.ms=6000

    # Specify the interval after which Apache ZooKeeper synchronizes with the connected servers.
    zk.sync.time.ms=2000

    ############################# Group Coordinator Settings #############################

    # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
    # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
    # The default value for this is 3 seconds.
    # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
    # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
    #group.initial.rebalance.delay.ms=0

    ############################# Replication configurationsi #############################
    
    # Specify the number of threads that are used to replicate messages from a source broker. 
    # Increasing this value can lead to increased parallelism in I/O operations in the broker. 
    #num.replica.fetchers=1
   
    # Specify the number of bytes that are used in fetch requests for each partition. 
    replica.fetch.max.bytes=1048576

    # Specify the time before the follower is removed.
    replica.lag.time.max.ms=10000

    # Specify the maximum wait time for each fetcher request that is issued by the follower replicas.
    # This value should not be greater than the one specified in replica.lag.time.max.ms.
    replica.fetch.wait.max.ms=500

    # Specify the interval at which the high watermark is saved to disk.
    replica.high.watermark.checkpoint.interval.ms=5000

    # Specify the socket timeout value for network requests. 
    # The value needs be the same or greater than the value that is specified in replica.fetch.wait.max.ms.
    replica.socket.timeout.ms=30000

    # Specify the buffer for the socket receiver.
    replica.socket.receive.buffer.bytes=65536


    # Rever - replica.lag.max.messages=4000

    # Specify the socket timeout value for channels used to send messages from controllers to brokers.
    controller.socket.timeout.ms=30000

    # Rever - controller.message.queue.size=10

    # If you specify a value that is greater than zero, any failed messages are sent again.
    retries=0

  log4j.properties: |-
    # Unspecified loggers and loggers with additivity=true output to server.log and stdout
    # Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise
    log4j.rootLogger=INFO, stdout

    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log
    log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log
    log4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log
    log4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log
    log4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log
    log4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log
    log4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    # Change the two lines below to adjust ZK client logging
    log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
    log4j.logger.org.apache.zookeeper=INFO

    # Change the two lines below to adjust the general broker logging level (output to server.log and stdout)
    log4j.logger.kafka=INFO
    log4j.logger.org.apache.kafka=INFO

    # Change to DEBUG or TRACE to enable request logging
    log4j.logger.kafka.request.logger=WARN, requestAppender
    log4j.additivity.kafka.request.logger=false

    # Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output
    # related to the handling of requests
    #log4j.logger.kafka.network.Processor=TRACE, requestAppender
    #log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
    #log4j.additivity.kafka.server.KafkaApis=false
    log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
    log4j.additivity.kafka.network.RequestChannel$=false

    log4j.logger.kafka.controller=TRACE, controllerAppender
    log4j.additivity.kafka.controller=false

    log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
    log4j.additivity.kafka.log.LogCleaner=false

    log4j.logger.state.change.logger=TRACE, stateChangeAppender
    log4j.additivity.state.change.logger=false

    # Change to DEBUG to enable audit log for the authorizer
    log4j.logger.kafka.authorizer.logger=WARN, authorizerAppender
    log4j.additivity.kafka.authorizer.logger=false
